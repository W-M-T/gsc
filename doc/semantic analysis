(Voorlopige) stappen van de semantische analyse:
1. Expressies parseren d.m.v. het verwerken van de associativiteit/fixity van custom operators
2. Volledig parseren van expressies door alle precendences te resolven m.b.v. shunting yard/precedence climbing?
3. Omschrijven van type synoniemen naar (structuren van) basic types.
4. Type inference, afleiden van polymorphische functies.
5. Type checking, controleren of alles well-typed is en of er geen dubbele definities zijn.
6. Andere optimalisaties:
    6.1 Dead-code analysis
        6.1.1 kijken of er statements zijn na return/continue/break statements.
        6.1.2 Niet-gebruikte variablen.
    6.2 ???

1. Resultaat van stap 1:
Alle custom gedefineerde operatoren worden aan de operator table toegeveogd
2. Resultaat van stap 2:
Expressies als a + b - c % d en a - b - (c % d) zijn omgeschreven naar respectievelijk a + (b - (c % d)) en (a - b) - (c % d)
3. Resultaat van stap 3:
String a = "test"; omschrijven naar [Char] a = "test";
4.



operator overloading met verschillende fixities?
miss beter verbieden

name resolution
warnings bij shadowing
error bij dubbele definitie
warning bij ongebruikte variabelen
error bij variabele die nergens gedefinieerd is (definite assignment analysis)

rekening houden met imports hier

onbereikbare code -> warning (i.e. na return of na break / continue in loop-context)

type analysis:
type-synoniem gebaseerde normalisatie?
Wat doe je bij recursieve typedefinities?
Als je een error geeft kan een user in principe geen lijst-achtige dingen definieren
[a] = (a, [a])
wat als een user trees wil kunnen definieren?
Int_Tree = (Int, [Int_Tree])
verboden

verbieden void type variabelen / inference-resultaat

bepalen of iets een typevar is of een echt type(synoniem)

Geen bestaande types toestaan in typesynonym-target
Geen void toestaan in tuptype, listtype of source van typesyn

stdlib symboltable definieren
Soort van een import maar geen source file: implementaties zijn machinecode

verboden operator identifiers error geven
